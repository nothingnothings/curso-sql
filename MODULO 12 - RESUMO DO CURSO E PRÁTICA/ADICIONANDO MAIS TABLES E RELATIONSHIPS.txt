











OK.... 





ANTES DE TUDO ISSO,

TEMOS O SET DAS TABLES....





A MINHA VERSÃO FICOU ASSIM:








CREATE TABLE cities (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) UNIQUE NOT NULL
);

CREATE TABLE locations (
        id SERIAL PRIMARY KEY,
        title VARCHAR(255) UNIQUE NOT NULL,
        street VARCHAR(255) NOT NULL,
        house_number VARCHAR(10) NOT NULL,
        postal_code INT NOT NULL,
        city_id INT REFERENCES cities(id) ON DELETE RESTRICT
);


CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    first_name VARCHAR(255) NOT NULL,
    last_name VARCHAR(255) NOT NULL,
    birth_date DATE NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL
);


CREATE TABLE organizers (
    id SERIAL PRIMARY KEY,
    password VARCHAR(255) NOT NULL,
    user_id INT REFERENCES users(id)
);



CREATE TABLE tags (
        id SERIAL PRIMARY KEY,
        name VARCHAR(255) UNIQUE NOT NULL
);


CREATE TABLE events (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) UNIQUE NOT NULL CHECK(LENGTH(name) > 5),  -- usamos essa BUILT-IN function para _ ESCREVER ESSE CHECK AÍ, QUE VAI ASSEGURAR QUE DEVEMOS TER STRINGS COM LENGTH MAIOR DO QUE 5...
    date_and_time TIMESTAMP NOT NULL,
    image_url VARCHAR(500) UNIQUE NOT NULL,
    description TEXT NOT NULL,
    max_participants INT CHECK (max_participants > 0) NOT NULL,
    min_age INT CHECK (min_age > 0) NOT NULL,
    location_id INT REFERENCES locations(id) ON DELETE CASCADE -- caso deletada a location desse negócio, o event relacionado é apagado tbm
);


CREATE TABLE events_users (
        id SERIAL PRIMARY KEY,
        event_id INT REFERENCES events,
        user_id INT REFERENCES users
);


CREATE TABLE tags_events (
     id SERIAL PRIMARY KEY,
     tag_id INT REFERENCES tags,
     event_id INT REFERENCES events
);























------> O PROFESSOR QUER SETTAR AS TABLES DE USERS E ORGANIZERS...













--> criamos a table de usesr...

















CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    first_name VARCHAR(255) NOT NULL,
    last_name VARCHAR(255) NOT NULL,
    birth_date DATE NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL
);













--> PARA A BIRTHDATE,


BASTA ARMAZENAR A DATE...








POR FIM,

VAMOS ARMAZENAR O EMAIL TBM...









PARA O EMAIL, COLOCAMOS 1 VARCHAR...









ESSA É A TABLE DE USERS...














TEMOS USERS QUE SÃO ORGANIZERS, TAMBÉM...








---> EXISTEM DIFERENTES MANEIRAS DE MODELAR ISSO,



MAS O PROFESSOR QUER DEIXAR 2 TABLES, MESMO..









ex:








CREATE TABLE organizers (
    id SERIAL PRIMARY KEY,
    password VARCHAR(255) NOT NULL,
    user_id INT REFERENCES users(id)
);










VAMOS COLOCAR APENAS __ 




PASSWORD COMO FIELD EXTRA,







MAS TAMBÉM 


TEMOS __ UMA RELATION COM NOSSOS USERS....






É CLARO QUE FALTOU 



1 SET DE 'ON DELETE CASCADE'



nessa relation (se o user for deletado, queremos que o organizer relacionado seja deletado também)...





EX:







CREATE TABLE organizers (
    id SERIAL PRIMARY KEY,
    password VARCHAR(255) NOT NULL,
    user_id INT UNIQUE REFERENCES users(id) ON DELETE CASCADE --- é unique pq é JUSTAMENTE 1 'ONE-TO-ONE' relation
);











PRONTO...







AQUI, NESSE CENÁRIO,

1


COISA QUE 

TEMOS,




É QUE 


O 



'user_id'







VAI SER TAMBÉM A PRIMARY KEY 



DA TABLE DE 'ORGANIZERS' --> pq podemos configurar o negócio assim (



    PODEMOS FAZER COM QUE 

    1 
    COLUMN SEJA, AO MESMO TEMPO
    A
     PRIMARY KEY DE 1 TABLE,


        E A FOREIGN KEY 

    

    DE OUTRA TABLE...


)












--> MAS ISSO FICA MEIO CONFUSO...









MAS O PROFESSOR ESCREVEU ASSIM:






CREATE TABLE organizers (

    password VARCHAR(255) NOT NULL,
    user_id SERIAL PRIMARY KEY REFERENCES users(id) ON DELETE CASCADE
);












ALTERNATIVAMENTE,




COM 'ONE-TO-ONE'

RELATIONSHIPS,


VC 

PODE 



SETTAR 




SUAS FOREIGN KEYS EM AMBAS AS TABLES...










É CLARO QUE NÃO ACABAMOS POR AQUI...


















--> COM 'EVENTS' E 'USERS'




TAMBÉM TEMOS 1 RELATION DE MANY-TO-MANY...












--> MAS COM 'ORGANIZERS' E 'USERS'


TEMOS 



1 'ONE-TO-ONE' RELATIONSHIP...












--> PRECISAMOS COLOCAR 1 RELATION ENTRE 'events' e 'organizers'...







--> PARA ISSO,


TEREMOS a column de 'organizer_id'


LÁ EM 'events',

para identificar esse organizer...












--> COLOCAMOS COMO 'CASCADE' A ACTION A SER TOMADA SE O ORGANIZER É APAGADO (se ele é apagado, seus eventos são cancelados...)







EX:







CREATE TABLE events (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) UNIQUE NOT NULL CHECK(LENGTH(name) > 5),  -- usamos essa BUILT-IN function para _ ESCREVER ESSE CHECK AÍ, QUE VAI ASSEGURAR QUE DEVEMOS TER STRINGS COM LENGTH MAIOR DO QUE 5...
    date_and_time TIMESTAMP NOT NULL,
    image_url VARCHAR(500) UNIQUE NOT NULL,
    description TEXT NOT NULL,
    max_participants INT CHECK (max_participants > 0) NOT NULL,
    min_age INT CHECK (min_age > 0) NOT NULL,
    location_id INT REFERENCES locations(id) ON DELETE CASCADE, -- caso deletada a location desse negócio, o event relacionado é apagado tbm
    organizer_id INT REFERENCES organizers(id) ON DELETE CASCADE
);











-------------------------------------













ok... essa é a relation entre events e organizers...









AGORA DEVEMOS VER COMO SETTAR ESSAS RELATIONS DE 'MANY-TO-MANY'...



