















-> OK.... AGORA PRECISAMOS SETTAR RELATIONSHIPS...











PARA ISSO,

É MELHOR PAUSAR E PENSAR SOBRE 'O QUE É 1 RELATIONSHIP ENTRE 2 DATA ENTITIES'...















--> MINHA RELATION FICOU ASSIM:








CREATE TABLE cities (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) UNIQUE NOT NULL
);

CREATE TABLE locations (
        id SERIAL PRIMARY KEY,
        title VARCHAR(255) UNIQUE NOT NULL,
        street VARCHAR(255) NOT NULL,
        house_number VARCHAR(10) NOT NULL,
        postal_code INT NOT NULL,
        city_id INT REFERENCES cities(id)
);




















--> MÚLTIPLAS LOCATIONS PODEM SER RELACIONADAS A 1 MESMA CITY...















PRECISAMOS DE IDs para RELATE os diferentes rows...







--> É O FIELD DE 'city_id'...






 
 NA VERSÃO DO PROFESSOR, ELE ESCREVE ASSIM:











 city_name VARCHAR(200) REFERENCES cities(name)















 --> PQ, NA VERSÃO DELE,


 ELE TINHA COLOCADO O FIELD DE 'name'


 COMO _ PRIMARY KEY:





 CREATE TABLE cities (
    name VARCHAR(255) PRIMARY KEY
);
















-> 'REFERENCES' É AQUILO QUE SETTA 1 'FOREIGN KEY CONSTRAINT'...















-> COM ISSO, O SQL DATABASE SYSTEM QUE ESTAMOS USANDO VAI ASSEGURAR QUE NÃO VAMOS INSERIR 






ids em 'city_id' que não existam 





na table de 'cities'..



















OK...










MAS HÁ UMA OUTRA MUDANÇA QUE VAMOS QUERER FAZER, AQUI....














SEMPRE CUIDE COM A ORDEM DE CRIAÇÃO DAS SUAS QUERIES....





--> DROPPAMOS AS TABLES, PARA RECRIÁ-LAS COM AS RELATIONS CORRETAS...









EU JÁ SETTEI A RELATION ENTRE EVENTS E LOCATIONS, TIPO ASSIm:





CREATE TABLE locations (
        id SERIAL PRIMARY KEY,
        title VARCHAR(255) UNIQUE NOT NULL,
        street VARCHAR(255) NOT NULL,
        house_number VARCHAR(10) NOT NULL,
        postal_code INT NOT NULL,
        city_id INT REFERENCES cities(id)
);



CREATE TABLE events (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) UNIQUE NOT NULL CHECK(LENGTH(name) > 5),  -- usamos essa BUILT-IN function para _ ESCREVER ESSE CHECK AÍ, QUE VAI ASSEGURAR QUE DEVEMOS TER STRINGS COM LENGTH MAIOR DO QUE 5...
    date_and_time TIMESTAMP NOT NULL,
    image_url VARCHAR(500) UNIQUE NOT NULL,
    description TEXT NOT NULL,
    max_participants INT CHECK (max_participants > 0) NOT NULL,
    min_age INT CHECK (min_age > 0) NOT NULL,
    location_id INT REFERENCES locations(id)
);












------> CERTO...






--> 1 EVENT É RELACIONADO A APENAS 1 LOCATION,
POR ISSO 



ESCREVEMOS ASSIM:



CREATE TABLE events (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) UNIQUE NOT NULL CHECK(LENGTH(name) > 5),  -- usamos essa BUILT-IN function para _ ESCREVER ESSE CHECK AÍ, QUE VAI ASSEGURAR QUE DEVEMOS TER STRINGS COM LENGTH MAIOR DO QUE 5...
    date_and_time TIMESTAMP NOT NULL,
    image_url VARCHAR(500) UNIQUE NOT NULL,
    description TEXT NOT NULL,
    max_participants INT CHECK (max_participants > 0) NOT NULL,
    min_age INT CHECK (min_age > 0) NOT NULL,
    location_id INT REFERENCES locations(id)
);






-----------------------------













CERTO, FIZ TUDO CORRETAMENTE...