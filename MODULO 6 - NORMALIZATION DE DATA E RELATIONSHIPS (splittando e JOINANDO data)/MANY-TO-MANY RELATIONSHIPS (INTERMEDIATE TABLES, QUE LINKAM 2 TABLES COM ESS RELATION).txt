






AGORA DEVEMOS VER ESSE 'MANY-TO-MANY' RELATIONSHIP,


ENTRE EMPLOYEES E PROJECTS TABLES...














----> PROFESSOR ADICIONA 1 NOVO ARQUIVO,


DE 'CLEAN DB' --> VAMOS DROPPAR TODAS NOSSAS TABLES,














PARA AS RECRIAR COM ESSAS NOVAS RELATIONS....









ESTA É A ORDEM CORRETA:








DROP TABLE intranet_accounts;
DROP TABLE employees;
DROP TABLE teams;
DROP TABLE company_buildings;













--> 



ESCREVEMOS 1 ÚLTIMO ARQUIVO,


'final setup',



EM QUE 


VAMOS CRIAR TODAS ESSAS TABLES +  A TABLE DE 'PROJECTS',



E OUTRA 

TABLE,

DE QUE PRECISAREMOS (é a table intermediária)...















AGORA O PROFESSOR QUER CRIAR UMA NOVA TABLE, PARA NOSSOS PROJECTS....





















-> tipo assim:







CREATE TABLE projects (
    id SERIAL PRIMARY KEY,
    title VARCHAR(300) NOT NULL,
    deadline DATE, ---- poderá ser 'NULL', pq nem todo project deverá ter 1 deadline 


)












MAS AÍ TAMBÉM PRECISAMOS DEFINIR OS _ EMPLOYEES___ COMO LIGADOS A ESSA TABLE..












--> MAS NÃO VAMOS COLOCAR UMA COLUMN DE 'employee_Id'

nessa table..










--> É POR ISSO QUE VAMOS ESCREVER ALGO ASSIM:





CREATE TABLE projects (
    id SERIAL PRIMARY KEY,
    title VARCHAR(300) NOT NULL,
    deadline DATE, ---- poderá ser 'NULL', pq nem todo project deverá ter 1 deadline 


)




employees (

    ...
    project_id INT REFERENCES projects
)

















--> CERTO...






COM ISSO, FICAMOS COM UMA ESTRUTURA SIMILAR À DE 'ONE-TO-MANY' RELATIONSHIPS....












--> CERTO, MAS NÃO PODEMOS ESCREVER 


ESSA RELATION DIRETAMENTE COM A COLUMN DE 'project_id'



lá no employee ---------> ISSO PQ __ qUEREMOS QUE __ cADA 






EMPLOYEE POSSA PARTICIPAR DE MÚLTIPLOS PROJECTS..
















--> PARA SOLUCIONAR ESSE PROBLEMA (cada project tem múltiplos employees, e cada employee pode participar de múltiplos projects),




PRECISAMOS DE UMA __ TABLE INTERMEDIÁRIA..















--------> PROVAVELMENTE VAMOS PRECISAR DE UMA TABLE COMO 'CONNECTIONS',



ou algo assim...















relations n:n ------------> CONEXÃO DIRETA (por meio de 1 foreign key em employees ou em projects)

NÃO É POSSÍVEL..















--> ENTÃO O QUE DEVEMOS FAZER?











--> A SOLUÇÃO É 

 ADICIONAR UMA 'INTERMEDIATE TABLE',









 QUE SERÁ USADA PARA _ _ARMAZENAR __AS RELATIONS ENTRE 

 'EMPLOYEES'

 E 

 'PROJECTS'...










--> ESSAS TABLES SERVEM __ APENAS_ PARA HANDLAR ESSAS RELATIONS de many-to-many...



 --> a table fica tipo assim:










projects_employees



id  project_id    employee_id


1      2                1



















---> TEMOS QUE CRIAR ESSA TABLE ___ DEPOIS_ DAS 


2 'RELATED TABLES'


SEREM CRIADAS (

    depois de employees e projects
)
















--> É POR ISSO QUE GERALMENTE ADICIONAMOS ESSAS TABLES __ INTERMEDIÁRIAS



AO FINAL,

SEMPRE..









--> SERÁ UMA TABLE REGULAR, TECNICAMENTE,

MAS 


EXISTIRÁ 
PARA 


ARMAZENAR AS RELATIONSHIPS 


MANY-TO-MANY

ENTRE 




AS 2 OUTRAS TABLES..














--> É BEM COMUM VOCÊ 


FORMAR O NOME DA INTERMEDIATE TABLE COM 

UMA COMBINAÇÃO 


DOS NOMES DAS OUTRAS TABLES,

TIPO ASSIM:

















CREATE TABLE projects_employees(



);
















EX:














CREATE TABLE projects (
    id SERIAL PRIMARY KEY,
    title VARCHAR(250) NOT NULL,
    deadline DATE,

)

CREATE TABLE company_buildings (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL
);
CREATE TABLE teams(
    id SERIAL PRIMARY KEY,
    name VARCHAR(300) NOT NULL,
    building_id INT REFERENCES company_buildings ON DELETE
    SET NULL ---- se 1 das buildings for DELETADA da database, esse field, nos records 'teams' relacionados, ficará como NULL...
);
CREATE TABLE employees (
    id SERIAL PRIMARY KEY,
    first_name VARCHAR(300) NOT NULL,
    last_name VARCHAR(300) NOT NULL,
    birthdate DATE NOT NULL,
    email VARCHAR(200) UNIQUE NOT NULL,
    team_id INT DEFAULT 1 REFERENCES teams ON DELETE
    SET DEFAULT
);
CREATE TABLE intranet_accounts (
    id SERIAL PRIMARY KEY,
    email VARCHAR(200) REFERENCES employees(email) ON DELETE CASCADE,
    --- com 'one-to-one' relationships, BASTA DEFINIR A RELATION EM 1 COLUMN, DE 1 DAS TABLES (não é necessário fazer isso nas 2)...
    -- se o EMPLOYEE É DELETADO, o record de 'intranet_account' correspondente também o é...
    password VARCHAR(200) NOT NULL
);


-- tables intermediárias são GERALMENTE CRIADAS AO FINAL, DEPOIS DO CREATE DAS 2 RELATED TABLES A ELA...
CREATE TABLE projects_employees(); --- table intermediária de 'projects' e 'employees' ---> INTERMEDIATE TABLES SÃO SEMPRE CRIADAS PARA HANDLAR 'MANY-TO-MANY' RELATIONSHIPS (1 mesmo employee pode participar de múltiplos projects, e cada project pode ter múltiplos employees)....
























CERTO...










AGORA, NESSA TABLE,

TIPICAMENTE AINDA VAMOS QUERER TER 1 ID (
    nossa primary key
),







MAS AÍ VAMOS QUERER TER 2 FOREIGN KEYS, AQUI, 

QUE VÃO APONTAR 

AOS EMPLOYEES E AOS PROJECTS...











EX:









CREATE TABLE projects_employees(
    id SERIAL PRIMARY KEY,
    employee_id INT REFERENCES employees,
    project_id INT REFERENCES projects


);
















--> COM ISSO, O PROFESSOR RELEMBRA 1 DETALHE:



'''VOCÊ PODE TER MÚLTIPLOS FOREIGN KEYS POR TABLE;


APENAS 1 ÚNICA PRIMARY KEY,

MAS MÚLTIPLAS FOREIGN KEYS EM 1 MESMA TABLE É ALGO PERMITIDO'''....
















-----> OK....







E TEREMOS '1 ROW POR RELATION, NESSA INTERMEDIATE TABLE'...








--> SE TEMOS 1 PROJECT COM 5 EMPLOYEES,



TERÍAMOS 


5 ROWS NESSA TABLE (Esse é o sentido)...












--> COMO ESSAS SÃO COLUMNS 'FOREIGN KEY'

REGULARES,


PODEMOS 

ADICIONAR 'REFERENCES' (ESSA CONSTRAINT)



PARA ADICIONAR 'REFERENTIAL INTEGRITY'

E 

DEIXAR 
CLARO QUE 



ESSE 


'employee_id'


e 



'projecT_id'




APONTAM A ESSAS TABLES,






o que vai garantir a integridade de tudo...










--> TAMBÉM PODEMOS DEFINIR 'O QUE DEVE ACONTECER SE ALGUM DOS EMPLOYEES FOR DELETADO''' -->





COM 'ON DELETE' --> COLOCAMOS 'CASCADE',

PQ __ 

SE ESSE 



EMPLOYEE FOR DELETADO,

SUA 


'RELATION'


COM A TABLE DE 'PROJECTS'

TAMBÉM SERÁ OBVIAMENTE DELETADA (ou seja, esse record de employee_id + project_id em 'projects_employees' TAMBÉM SERÁ REMOVIDO)...

















EX:








CREATE TABLE projects_employees(
    id SERIAL PRIMARY KEY,
    employee_id INT REFERENCES employees ON DELETE CASCADE,  ---- queremos que todos os records correspondentes a esse EMPLOYEE, nessa table de 'projects_employees', também sejam removidos a partir de sua deleção..
    project_id INT REFERENCES projects ON DELETE CASCADE --- mesma coisa aqui, pq também vmaos querer remover as entries relativas a esse 'project_id', nessa nossa table...


); --- table intermediária de 'projects' e 'employees' ---> INTERMEDIATE TABLES SÃO SEMPRE CRIADAS PARA HANDLAR 'MANY-TO-MANY' RELATIONSHIPS (1 mesmo employee pode participar de múltiplos projects, e cada project pode ter múltiplos employees)....


















--> E FAZEMOS A MESMA COISA COM 'project_Id' (colocar 'ON DELETE CASCADE', pq o record relativo a conexão com esse 'project_id' DEIXARÁ DE EXISTIR/ser útil)....










COM ISSO, SEREMOS CAPAZES 

DE USAR 

ESSA TABLE 


PARA INSERIR MAIS DATA,


ANTES DE 


FINALMENTE PODERMOS QUERIAR, JOINAR E SELECTAR 



NOSSA DATA,

para praticar tudo isso....