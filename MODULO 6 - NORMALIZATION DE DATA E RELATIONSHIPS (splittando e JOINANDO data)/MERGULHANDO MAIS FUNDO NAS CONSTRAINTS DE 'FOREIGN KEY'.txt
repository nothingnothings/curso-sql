 










 --> OK...








 PARA VISUALIZAR A CONSTRAINT DE 'FOREIGN KEY'


 EM AÇÃO,


 TERÍAMOS/TEMOS DE UPDATAR 



 AS NOSSAS TABLES....








 OU, ENTÃO, PARA 

 ESSE EXERCÍCIO,



 O PROFESSOR VAI DROPPAR 


 E RECRIAR NOSSAS TABLES...







 TIPO ASSIM:







 DROP TABLE cities;
DROP TABLE addresses;
DROP TABLE users;














--> O PROFESSOR VAI DROPPAR E RECRIAR ESSAS 3 TABLES...












--> ALTERAR ESSAS TABLES TBM SERIA UMA OPÇÃO,


MAS VEREMOS 


ISSO 

NA PRÓXIMA AULA...









--> OK... O PROFESSOR ENTÃO 





RODA O STATEMENT DOS DROPS, NADA DE MAIS...







--> COM ISSO ACABADO,
O PROFESSOR ADICIONA 


O CÓDIGO DE 'CREATE TABLES WITH REFERENCES' 



















--> O 'REFERENCES'




É A CONSTRAINT QUE 


NOS PERMITE 



CRIAR A 'CONSTRAINT DE FOREIGN KEYS'...













FICAMOS COM ESTES CREATE STATEMENTS, DE INÍCIO:










DROP TABLE cities;
DROP TABLE addresses;
DROP TABLE users;
CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    first_name VARCHAR(300) NOT NULL,
    last_name VARCHAR(300) NOT NULL,
    email VARCHAR(300) NOT NULL,
    address_id VARCHAR(300) NOT NULL,
);
CREATE TABLE addresses (
    id SERIAL PRIMARY KEY,
    street VARCHAR(300) NOT NULL,
    house_number VARCHAR(300) NOT NULL,
    city_id INT NOT NULL,
);
CREATE TABLE cities (
    id SERIAL PRIMARY KEY,
    name VARCHAR(300) NOT NULL,
);


















--> CERTO.. E AGORA O PROFESSOR QUER MANIPULAR ESSES STATEMENTS DE 'CREATE TABLE'...








--> QUER OS MANIPULAR PARA QUE PASSEM A USAR ESSAS CONSTRAINTS DE 'FOREIGN KEY'...









--> COMEÇAMOS PELO 'users'...



QUEREMOS QUE O 'address_id'





ACTUALLY SE REFIRA 


AO FIELD DE 'id'


EXISTENTE NA TABLE DE 'addresses'...











------> PARA ISSO,

USAREMOS 


A CONSTRAINT DE 'REFERENCES'..



--> TIPO ASSIm:








CREATE TABLE users (

address_id INT REFERENCES addresses(id) 

)








-----> CERTO....


MAS É CLARO QUE SÓ ISSO NÃO BASTA....







O CÓDIGO VAI FICANDO ASSIM:








DROP TABLE cities;
DROP TABLE addresses;
DROP TABLE users;
CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    first_name VARCHAR(300) NOT NULL,
    last_name VARCHAR(300) NOT NULL,
    email VARCHAR(300) NOT NULL,
    address_id INT REFERENCES addresses(id) NOT NULL, ---- eis o código em questão.
);
CREATE TABLE addresses (
    id SERIAL PRIMARY KEY,
    street VARCHAR(300) NOT NULL,
    house_number VARCHAR(300) NOT NULL,
    city_id INT NOT NULL,
);
CREATE TABLE cities (
    id SERIAL PRIMARY KEY,
    name VARCHAR(300) NOT NULL,
);










OK... FICAMOS COM ESSA CONSTRAINT DE 'REFERENCES'...









MAS O PROFESSOR NOS EXPLICA QUE ESSA COLUMN DEVERÁ REMOVER A CONSTRAINT DE 'NOT NULL',

POR ISSO FICA ASSIM:








DROP TABLE cities;
DROP TABLE addresses;
DROP TABLE users;
CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    first_name VARCHAR(300) NOT NULL,
    last_name VARCHAR(300) NOT NULL,
    email VARCHAR(300) NOT NULL,
    address_id INT REFERENCES addresses(id), ---- eis o código em questão.
);
CREATE TABLE addresses (
    id SERIAL PRIMARY KEY,
    street VARCHAR(300) NOT NULL,
    house_number VARCHAR(300) NOT NULL,
    city_id INT NOT NULL,
);
CREATE TABLE cities (
    id SERIAL PRIMARY KEY,
    name VARCHAR(300) NOT NULL,
);
















--> OK... VAMOS COLOCAR A CONSTRAINT DE 'REFERENCES',



E AÍ 


PRECISAMOS ESPECIFICAR ' A QUE TABLE ESSA COLUMN DEVERÁ 


SER RELACIONADA'... -> COLOCAMOS 'id',


PQ 

SERÁ ISSO AÍ MSM...











--> SIDE NOTE: SE VOCÊ 

QUER FAZER UMA RELATION DESSA COLUMN COM __ A 'PRIMARY KEY'



DA OUTRA TABLE,

DIRETAMENTE,


VOCê 


PODE SIMPLESMENTE OMITIR ESSA ESPECIFICAÇÃO (esse '(id)' ),



TIPO ASSIM:








'''''''''''''''''''''''''

address_id INT REFERENCES addresses

''''''''''''''''''''












--> SE VOCÊ QUER __ SETTAR_ _ UMA RELATION __ COM A PRIMARY KEY DESSA TABLE,




ISSO É FINE...










---> ESSE É O CASO AQUI, CLARO,


MAS O PROFESSOR QUER MESMO ASSIM DEFINIR ISSO COMO 'addresses (id)',




PQ QUER NOS MOSTRAR  A SINTAXE COMPLETA...















--> ISSO VAI SETTAR NOSSA RELATION... 









-> E JÁ COM ISSO,


NÓS NÃO VAMOS SER  CAPAZES DE FAZER 'INSERT' DE USERS __ QUE 





POSSUAM VALUES DE 'address_id'



QUE NÃO 


EXISTEM/AINDA NÃO EXISTEM LÁ EM 'addresses'...














--> ok, isso já é bem bom...










--> ESSAS ACTIONS DE INSERT SERIAM BLOCKEADAS,


E 

APENAS SERÍAMOS CAPAZES/SEREMOS CAPAZES 





DE INSERIR NOVOS USERS __ COM __ 



VALUES DE 'address_id'






QUE 



JÁ EXISTAM LÁ NA COLUMN DE 'PRIMARY KEY'



da table de 'addresses'...












MAS O PROFESSOR TAMBÉM QUER DEFINIR


ESSA COLUMN 



DE MODO ___ QUE __ 

ELA TAMBÉM SEJA UPDATADA E HANDLADA 



CORRETAMENTE _ _SEMPRE QUE __ 


1 

'RELATED ADDRESS'


FOR ALTERADO (

    ou seja,


    cases em que 


''''1 RELATED ADDRESS É/FOI DELETADO''',



OU ENTÃO 


''''1 RELATED ADDRESS FOI UPDATADO''' (apesar de essas actions de update de VALUES de 'id', de values de id primary key, serem INCOMUNS)...

)













--> OK, MAS O QUE IMPORTA É QUE 





__ESSAS ACTIONS PODEM SER 


CONFIGURADAS,

COM:






1) ON DELETE --> VEM ANTES... É USADO PARA _ CONFIGURAR '''O QUE DEVE ACONTECER SE O RELATED RECORD, O RECORD RELACIONADO A ESSA COLUMN, FOR DELETADO'''.









2) ON UPDATE ----> VEM DEPOIS .. ---> É USADO PARA DEFINIR/CONFIGURAR 'O QUE DEVE ACONTECER SE O RELATED ADDRESS FOR ALTERADO', ou seja, se o value do 'id' daquele related address FOR ALTERADO...












OK... É ISSO QUE PODEMOS DEFINIR AQUI...











MAS ISSO NOS TRAZ UMA PERGUNTA:





'''QUE AÇÕES PODEMOS DEFINIR, 


AÇÕES QUE PODEM OCORRER, A PARTIR DE __ ON DELETE?'''

















--> OBSERVAÇÃO:







''''ON DELETE'''' É O ALTERADOR BEM MAIS COMUM/FREQUENTE 




QUE VOCÊ DEFINE,


PQ __ VOCê RARAMENTE VAI UPDATAR OU ALTERAR __ 'RELATED VALUES'...

(


pelo menos quando você está APONTANDO A PRIMARY KEYS DE NOSSAS TABLES...




)











--> É POR ISSO QUE É BEM MAIS COMUM O 'DEAL WITH' 



COM DELETED RELATED DATA...













-------> 'UPDATED RELATED DATA',


o define de actions a serem tomadas a partir dessa action,




__ ACONTECE COM MAIOR FREQUÊNCIA 



SE VOCÊ 

ESTÁ 

USANDO UMA 'NON-PRIMARY KEY VALUE' COMO __ _RELATED COLUMN,


vinculada com essa constrinat de 'references'...



















------> OK, MAS QUE ACTIONS PODEMOS DEFINIR/TRIGGAR, A PARTIR 

DE 

'ON UPDATE' E 'ON DELETE'?












-> BEM, 


TEMOS, DE INÍCIO:










1) RESTRICT ------> 










2) NO ACTION ------>













OS 2 __ SÃO MT SIMILARES...












2) NO ACTION ------> É ACTUALLY O ___dEFAULT__...


-> É O DEFAULT, OCORRE QUANDO VOCÊ NÃO ESPECIFICA SETTINGS DE 'ON DELETE'  E 'ON UPDATE'..










EM AMBOS OS CASOS,






DE 'RESTRICT' E 'NO ACTION',






O SQL/VOCÊ 








__ É __ IMPEDIDO__ DE APAGAR 1 'RELATED RECORD'... --> 







OU SEJA, O QUE ELE FAZ É 




'''PREVENT THE INTENDED ACTION (EX: DELETING A RELATED ROW)''''...









----> ISSO QUER DIZER QUE SE TENTAMOS DELETAR 1 ADDRESS QUE PERTENCE/ESTÁ RELACIONADO COM 


1 DETERMINADO 'user' ( da outra table),


ISSO 


NÃO VAI FUNCIONAR...











--> A DIFERENÇA ENTRE 



'NO ACTION'


e 



'RESTRICT'







É QUE 

'NO ACTION' 




É MENOS RÍGIDO (aceita o delete/update DO RECORD RELACIONADO, EM ALGUNS CASOS)...













---> 'NO ACTION',


o DEFAULT,




É DIFERENTE... A DELEÇÃO/UPDATE PODE FUNCIONAR,

ÀS VEZES,



ISSO 




SE A SUA OPERAÇÃO FAZ PARTE DE UMA 'OVERALL TRANSACTION',




UMA TRANSACTION EM QUE O 'END RESULT'



LEVA A __ UMA SITUAÇÃO EM QUE TEMOS 'CORRECT DATA ONCE AGAIN'...

(

    transactions são operações com várias etapas,

    em que 


    todas as etapas são executadas de 1 só vez,

    como se fossem só 1 etapa....
)









MAS VEREMOS TRANSACTIONS EM UM COURSE SECTION FUTURO....











POR FIM, DEPOIS DE 'RESTRICT' E 'NO ACTION',
TEMOS 


'CASCADE'...











3) CASCADE -----> COM 'CASCADE',



A ACTION É SIMPLESMENTE 



__REALIZADA___ NA TABLE RELACIONADA ("related table")



TAMBÉM... ---------------------------> ISSO QUER DIZER QUE 



__ SE VOCÊ APAGAR__ O RECORD LÁ NA TABLE DE 'addresses',





ISSO VAI __ APAGAR DIRETAMENTE O 'USER'

QUE CONTINUA 

UMA RELATION ÀQUELE ADDRESS ESPECÍFICO....




(

    "PERFORM THE SAME ACTION (e.g. deleting a related row) ON THE 
    ROW WITH THE FOREIGN KEY'''...
)

















--> OK.... ALÉM DESSAS 3 OPTIONS,



TEMOS MAIS ESSAS 2:













4) SET NULL  -------> COM 


 O 'SET NULL',



 VAMOS __ SIMPLESMENTE DEIXAR O VALUE _ DA FOREIGN KEY COMO 'NULL',


 NA HIPÓTESE DO 'RELATED ROW' SER APAGADO (se o address é apagado, todos users com aquele address ficarão com 'NULL' nesse field)...











5) SET DEFAULT ------> COM ESSA OPTION,



VAMOS SIMPLESMENTE DEIXAR O VALUE DA FOREIGN KEY COMO 'DEFAULT',

NA HIPÓTESE DO RELATED ROW SER APAGADO (

    se o address é apagado,


    TODOS USERS COM AQUELE ADDRESS FICARÃO COM O VALUE DEFAULT DEFINIDO PARA ESSA COLUMN,
    nessa table específica...
)