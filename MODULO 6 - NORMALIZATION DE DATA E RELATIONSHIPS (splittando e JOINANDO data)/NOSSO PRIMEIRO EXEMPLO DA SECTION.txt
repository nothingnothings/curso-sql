









--> CHEGA DE TEORIA, POR AGORA.








--> VAMOS SUJAR NOSSAS MÃOS..








-> VAMOS SETTAR UMAS TABLES QUE TERÃO RELATIONs..







VAMOS CRIAR UMA DATABASE,


de nome 'relations'..













CREATE DATABASE relations;









--> 







VAMOS CRIAR ESSA DATABASE...













--> 



ß
ok...




ß







----> PRONTO...








ESTAMOS CONECTADOS, PRONTOS PARA COMEÇAR...










CRIAMOS UM NOVO ARQUIVO,

'create tables',



EM QUE VAMOS CRIAR MÚLTIPLAS TABLES...







EX:








CREATE TABLE 












--> OK, MAS DE QUE TIPO DE DATA ESTAMOS FALANDO?











QUAL ESTRUTURA?











--> PROFESSOR PREPAROU UM EXEMPLO SIMPLES,

QUE N VAI MT LONGE DO QUE ESTUDAMOS...






ex:










Users 


Full Name 

Email 


Address 










-> OK, VAMOS CRIAR ASSIM, MESMO... (mas o 'Full Name' deverá ser 2 campos/columns)..













TIPO ALGO ASSIM:







CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    first_name VARCHAR(255),
    last_name VARCHAR(255),
    email VARCHAR(200)
)











-> QUEREMOS SPLITTAR NOSSA DATA,



PARA ADERIR AO CONCEITO DE 'DATA NORMALIZATION',

PARA 

EVITAR REDUNDANCY 


E DEIXAR O TRABALHO COM NOSSA DATA __ MAIS SIMPLES....










--> PODERÍAMOS ESTRUTURAR NOSSO NEGÓCIO ASSIM:











USERS 



ID 


first name 


last name 


Email 


ADDRESS ID 















ADDRESSES 

ID 
STREET 
HOUSE NUMBER 
CITY ID 











CITIES 
ID 
NAME











FICAREMOS COM ALGO ASSIM:









CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    first_name VARCHAR(255),
    last_name VARCHAR(255),
    email VARCHAR(200) address_id INT UNIQUE
);
CREATE TABLE addresses (
    id SERIAL PRIMARY KEY,
    street VARCHAR(255),
    number INT,
    city_id INT UNIQUE
);
CREATE TABLE cities (
        id SERIAL PRIMARY KEY,
        city_name VARCHAR(255)
);











---> CERTO...














MAS VAMOS QUERER _ CRIAR __ TABLEs_ _COM RELATIONS...







ou seja,

esse formato de table que escrevi logo acima NÃO SERÁ SUFICIENTE...












--> QUEREMOS CRIAR UM PUNHADO DE TABLES...














CREATE TABLE users (

)











--> nessa table de users,




PARA AS COLUMNS,

queremos 







uma column de 


id,

tipo assim:












id SERIAL PRIMARY KEY ,


xxxx ,

yyy,

zzz.











--> SE VOCÊ QUER MYSQL,

deve escrever 



INT PRIMARY KEY AUTO_INCREMENT..











OK....








JÁ FIZ ISSO....









---> DEPOIS DO ID, QUEREMOS TER O 'FIRST' E 'LAST' NAMES...





ex:






CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    first_name VARCHAR(255),
    last_name VARCHAR(255),
    email VARCHAR(200) address_id INT UNIQUE
);












------>  O PROFESSOR TAMBÉM COLOCA A CONSTRAINT DE 'NOT NULL' 

NESSES FIELDS,

PARA ASSEGURAR QUE 


ESSES FIELDS N POSSAM FICAR VAZIOS..





ex:








CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    first_name VARCHAR(255) NOT NULL,
    last_name VARCHAR(255) NOT NULL,
    email VARCHAR(200) NOT NULL,
     address_id INT UNIQUE NOT NULL
);








EX:










CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    first_name VARCHAR(255) NOT NULL,
    last_name VARCHAR(255) NOT NULL,
    email VARCHAR(200) NOT NULL,
    address_id INT UNIQUE NOT NULL
);
CREATE TABLE addresses (
    id SERIAL PRIMARY KEY,
    street VARCHAR(255),
    number INT,
    city_id INT UNIQUE
);
CREATE TABLE cities (
    id SERIAL PRIMARY KEY,
    city_name VARCHAR(255)
);













---> 




NO FIELD DE EMAIL,

também 


deixo 



'NOT NULL'...







---> OK...






MAS AÍ PRECISAMOS DO 'address_id'...











O PROFESSOR ESCREVE O ADDRESS_ID FIELD..






ex:












address_id ------> MAS O PROBLEMA É QUE 



ESSA COLUMN 

DEVERÁ __ APONTAR_ _ A OUTRA TABLE...
















->  É POR ISSO QUE DIZEMOS QUE O FIELD DE 'address_id'




SERÁ UMA __ FOREIGN KEY,




SERÁ UMA FOREIGN KEY DESSA TABLE,



CONECTANDO 


ROWS DESSA TABLE A ROWS DE __ OUTRA TABLE....











AINDA VAMOS ADICIONAR ESSA OUTRA TABLE..











-_> COLOCAMOS 'address_id',


PQ ESSA É UMA NAMING CONVENTION (

    é comum 

    escrever 

    os FIELDS de FOREIGN KEYS assim,


    MAS NÃO É UM 'MUST-DO'...
)







--> VOCÊ PODE ESCOLHER QUALQUER NOME QUE QUISER,




MAS É COMUM VOCÊ 




PEGAR O NOME DA TABLE A QUE VOCÊ QUER SE CONECTAR (


    por isso 


    colocamos a 'entity name',

    de 'address',

    e aí 



    colocamos o '_id' 




,


para que fique 'address_id'...
)












OU SEJA,

NOMEAMOS DE 


acordo com 

o
 

 'name of related data entity' ("address" for the addresses table)...







 






 --> VOCÊ PODE ESCOLHER QUALQUER NOME,



 MAS VOCÊ TIPICAMENTE QUER SINALIZAR QUE 

 ESSA COLUMN 

 'SERÁ USADA PARA ESTABELECER UMA RELAÇÃO à DATA QUE 

 ESTÁ ARMAZENADA EM OUTRA TABLE'...













 MAIS TARDE NESSA SECTION,


 VAMOS APRENDER TAMBÉM SOBRE 



 'COMO PODEMOS _DEIXAr__ ESSA CONEXÃO MAIS '''FORMAL''',
  
  E COMO 


  PODEMOS 



  ADICIONAR UMA 

  CONSTRAINT EXTRA A COLUNAS COMO 'address_id',

   
   PARA __ ENTÃO DEIXAR CLARO QUE 


   ISSO SETTARÁ UMA 

   CONNECTION 

   A 



   UMA OUTRA COLUMN,

   EM OUTRA TABLE'..











ENTRETANTO,

VOCÊ AINDA UTILIZARÁ NAMING CONVENTIONS COMO ESSA...










ESSAS CONVENTIONS SERVEM PARA SINALIZAR QUE 


ESTÁ 

SENDO DEFINIDA UMA CONVENTION..


















-->  COLOCAREMOS O DATA TYPE DE 'address_id' mais tarde....











------> OK...





AÍ VAMOS CRIAR A TABLE DE 'addresses',


TIPO ASSIm:















CREATE TABLE addresses (


    id SERIAL PRIMARY KEY,
    street_name VARCHAR(255) NOT NULL,
    house_number INT 
)







EX:








CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    first_name VARCHAR(255) NOT NULL,
    last_name VARCHAR(255) NOT NULL,
    email VARCHAR(200) NOT NULL,
    address_id INT UNIQUE NOT NULL
);
CREATE TABLE addresses (
    id SERIAL PRIMARY KEY,
    street VARCHAR(255) NOT NULL,
    house_number VARCHAR(50) NOT NULL,
    city_id INT UNIQUE NOT NULL
);
CREATE TABLE cities (
    id SERIAL PRIMARY KEY,
    city_name VARCHAR(255) NOT NULL
);













---> NA ALEMANHA,

TEMOS ENDEREÇOS COM 'NÚMEROS DE CASA' 

como '8A', '9B'...




POR ISSO COLOCAMOS COMO 'VARCHAR'...









--> PROFESSOR TAMBÉM COLOCA UM 'city_id'



LÁ EM 'addresses'...








----> ISSO VAI EVITAR DATA REDUNDANCY...  


--> A OUTRA TABLE SERÁ ASSIM:



CREATE TABLE cities (
    id SERIAL PRIMARY KEY,
    city_name VARCHAR(255) NOT NULL
);








---> CERTO...











--> COM ISSO, FICAMOS COM AS 3 TABLE DEFINITIONS...









AGORA SÓ PRECISAMOS FAZER 'WIRE'


DO 
'
address_id'


e 




DO 


'city_id'


ÀS SUAS TABLES RESPECTIVAS (related tables)...











--> PARA ISSO,


QUEREMOS 


USAR A ID COLUMN DE 'address_Id'



COMO FOREIGN KEY,


FOREIGN KEY QUE 

VAI APONTAR 


À PRIMARY KEY (field 'id')


da table 

de 

'addresses'...










-> É POR ISSO QUE,

EM 

'address_id',


PRECISAMOS __ USAR __ O 

DATA TYPE 






do field 'id'


da OUTRA TABLE (será ou 'INT' ou 'SERIAL', a depender do uso de database MYSQL/POSTGRESQL)









--> OK...





ISSO SIGNIFICA QUE FICARÁ TIPO ASSIM:







CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    first_name VARCHAR(255) NOT NULL,
    last_name VARCHAR(255) NOT NULL,
    email VARCHAR(200) NOT NULL,
    address_id SERIAL UNIQUE NOT NULL --devemos usar o MESMO DATA TYPE do field 'id' do addresses (e isso devemos fazer sempre, no caso, com qualquer foreign key que escrevermos)
);
CREATE TABLE addresses (
    id SERIAL PRIMARY KEY,
    street VARCHAR(255) NOT NULL,
    house_number INT NOT NULL,
    city_id SERIAL UNIQUE NOT NULL
);
CREATE TABLE cities (
    id SERIAL PRIMARY KEY,
    city_name VARCHAR(255) NOT NULL
);








---------------------------------------





mas em 'address_id'



NÃO DEVEMOS 


colocar 



'PRIMARY KEY',

pq não será a primary key.... -> ISSO 


PQ ESSE 

FIELD NÃO DEVERÁ SER A PRIMARY KEY,



E SIM 




SERÁ APENAS 


1 'COLUMN QUE VAI CONTER __ OS VALUES DE PRIMARY KEY DE __ UMA  OUTRA TABLE'...













--> É POR ISSO QUE 'address_id SERIAL' 


É TUDO QUE 

PRECISAMOS ADICIONAR..










-> OUTRA COISA BOA É ADICIONAR 'NOT NULL'


a essa column 


de 'address'









é claro que isso depende do app que você está construindo,



apesar de 

o professor achar bom colocarmos "not null" para esse tipo de field...


















--> podemos fazer MAIS COISAS DO QUE APENAS ISSO,

 



 MAS, POR AGORA, 


ISSO BASTA:














CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    first_name VARCHAR(255) NOT NULL,
    last_name VARCHAR(255) NOT NULL,
    email VARCHAR(200) NOT NULL,
    address_id SERIAL UNIQUE NOT NULL --devemos usar o MESMO DATA TYPE do field 'id' do addresses (e isso devemos fazer sempre, no caso, com qualquer foreign key que escrevermos)
);
CREATE TABLE addresses (
    id SERIAL PRIMARY KEY,
    street VARCHAR(255) NOT NULL,
    house_number INT NOT NULL,
    city_id SERIAL UNIQUE NOT NULL
);
CREATE TABLE cities (
    id SERIAL PRIMARY KEY,
    city_name VARCHAR(255) NOT NULL
);












OK... AÍ RODAMOS ESSE ARQUIVO,

E AÍ 

CRIAMOS 

AS 3 TABLES...




certo, sucesso...



AS TABLES FORAM CRIADAS,



E JÁ SETTAMOS AS DATA RELATIONS 

DENTRO DESSAS TABLES...









AGORA DEVEMOS FAZER 'INSERT' DE DATA,


E ENTÃO 

VER COMO PODEMOS FAZER 'QUERY'

POR ESSA 'RELATED DATA'(

    como podemos 

    RETRIEVAR 


    DADOS 

    DE OUTRAS TABLES,

    A PARTIR DOS VALUES DESSES 'FOREIGN KEYS' columns...
)