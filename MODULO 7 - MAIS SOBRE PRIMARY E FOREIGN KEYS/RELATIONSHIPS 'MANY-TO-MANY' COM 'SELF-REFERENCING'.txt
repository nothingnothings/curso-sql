










NA ÚLTIMA LIÇÃO,

APRENDEMOS SOBRE 

'SELF-REFERENCING',


OU 


'SELF-REFERENTIAL RELATIONSHIPS'...









--> NESSA AULA,

LEVAREMOS ISSO AO PRÓXIMO NÍVEL,

PQ 



ESTUDAREMOS 


'SELF-REFERENTIAL MANY-TO-MANY RELATIONSHIPS'..

















--> É 'OUTRO TIPO __, ESPECIAL,


DE SELF-REFERENTIAL RELATIONSHIP QUE 


VOCê 

PODE TER'.....









----> NESSE EXEMPLO,


ESTAMOS CONSTRUINDO UMA REDE SOCIAL..














PRECISAMOS DEFINIR A DATABASE QUE VAI PERTENCER A ESSE APP..












NESSE APP,

temos:







1) USERS ....








CADA USER PODE TER 'FRIENDS'...








2) FRIENDS... 









--> MAS É CLARO QUE CADA 'FRIEND'

DE 
1 USER 

É __ 1 USER, NO FINAL DAS CONTAS....











EX:













                           HAVE
                    I-------------->
                    I               V
                USERS              FRIENDS 
                   I                 I 
                   I                 I 
                    <---------------

                            are















--> ok...









ISSO QUER DIZER QUE NOVAMENTE 

TEMOS UMA 

'SELF-REFERENCING RELATIONSHIP',



MAS AGORA 







ELA É UMA RELATION 'MANY-TO-MANY'( antes era 'many-to-one') --> 








ISSO 

PQ 




CADA USER PODE TER MÚLTIPLOS AMIGOS,


E CADA 'AMIGO' 

DE 

1 

USER 


__ PODE __tER MÚLTIPLOS FRIENDS,

TAMBÉM...












----> NO FINAL DAS CONTAS,


TEREMOS:







1) 1 TABLE DE USERS,
 

 COM TODA NOSSA 'USER-DATA'...











 --> E, COMO TEMOS UMA 'MANY-TO-MANY'

 RELATIONSHIP,




NÃO É 

POSSÍVEL



TERMOS 


A COLUMN DE 'RELATION'


DENTRO 




DESSA TABLE DE 'users'... --------> EM VEZ DISSO,



COMO APRENDEMOS ANTERIORMENTE,



COM 




'MANY-TO-MANY'

RELATIONSHIPS,



PRECISAMOS 

DE UMA 
'LINKING',


UMA INTERMEDIATE TABLE 

ENTRE 





AS TABLES (



    table1,
    table2,

    table1_table2,



    TIPO ISSO....
)















--> ENTRETANTO,








DESSA VEZ,

TEREMOS TECNICAMENTE 


1 

'SELF-REFERENCING MANY-TO-MANY RELATIONSHIP' ----->














2) ISSO PQ __ SERÃO _ APENAS 
2 TABLES,



A DE 'USERS' 



e 



A DE 'friends' (a 'INTERMEDIATE TABLE')...












USERS 

id  f_name  email  ...

1   Max     m@t.com 
2   Manu    ma@t.com 








FRIENDS 


user_id    friend_id 


1           2


3           5










-----> OK... NESSA  INTERMEDIATE TABLE,



a de 'friends',



AMBAS AS COLUMNS _ VÃO __ 

SE REFERIR
 
 À 


 MESMA TABLE,

  
  A TABLE DE 'users',


  NESSE 

  CASO...












  --> ok... 








  O PROFESSOR ADICIONA UM NOVO ARQUIVO,













  self-referencing-many-to-many.sql 














  EX:











  
CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    first_name VARCHAR(300) NOT NULL,
    last_name VARCHAR(300) NOT NULL,
    
)











TEREMOS RELATIONS ENTRE NOSSOS USERS,

SIM,

MAS 'MANY-TO-MANY'

RELATIONSHIPS...






CRIAMOS UMA TABLE SEPARADA,






QUE SERÁ A 'INTERMEDIATE TABLE'..














--> O NOME DA TABLE SERÁ 'users_friends'...












CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    first_name VARCHAR(300) NOT NULL,
    last_name VARCHAR(300) NOT NULL,
);
CREATE TABLE users_friends(
    ---nossa INTERMEDIATE TABLE... AMBOS OS FIELDS QUE FAZEM 'REFERENCES' VÃO __ FAZER REFERÊNCIA À MESMA TABLE, A TABLE DE 'users'...
);















--> MAS EM VEZ DE 



CONECTAR 

2 TABLES 
DISTINTAS 


COM 'MANY-TO-MANY'

RELATIONSHIP
ENTRE SI,









AQUI ESSA TABLE VAI CONECTAR 



A MESMA __ TABLE, 1 ÚNICA TABLE,

ELA COM ELA MESMA,







COM ESSE 'MANY-TO-MANY' RELATIONSHIP...










-> O PROFESSOR COMEÇA COM UM 

'user_id'...








ex:



CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    first_name VARCHAR(300) NOT NULL,
    last_name VARCHAR(300) NOT NULL,
);
CREATE TABLE users_friends(
   user_id INT REFERENCES users(id),

);


















OK ... MAS TAMBÉM PODEMOS DEFINIR 'O QUE DEVE ACONTECER SE 1 USER FOR DELETADO' --> 


BEM,

SE ELE FOR DELETADO, ESSA RELAÇAÕ DE 'FRIENDSHIP'

ENTRE 

OS USERS/FRIENDS NAÕ EXISTIRÁ MAIS,

POR ISSO COLOCAMOS 'ON DELETE CASCADE',

para apagar 

essa friendship record..






CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    first_name VARCHAR(300) NOT NULL,
    last_name VARCHAR(300) NOT NULL,
);
CREATE TABLE users_friends(
   user_id INT REFERENCES users(id) ON DELETE CASCADE,
   friend_id INT REFERENCES users(id) ON DELETE CASCADE

);


















----> A COLUMN DE 'friend_id'



TAMBÉM 

VAI REFERENCIAR 


A TABLE DE 'users',







E TEREMOS A MESMA ACTION DE 'ON DELETE CASCADE'...
















ex:









CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    first_name VARCHAR(300) NOT NULL,
    last_name VARCHAR(300) NOT NULL,
);
CREATE TABLE users_friends(
    ---nossa INTERMEDIATE TABLE... AMBOS OS FIELDS QUE FAZEM 'REFERENCES' VÃO __ FAZER REFERÊNCIA À MESMA TABLE, A TABLE DE 'users'...

    user_id INT REFERENCES users ON DELETE CASCADE, -- se esse user/friend (1 dos polos da relação) for apagado, VAMOS QUERER DELETAR ESSE RECORD DA 'FRIENDSHIP' ENTRE OS 2...
    friend_id INT REFERENCES users ON DELETE CASCADE

); 
























--> O ID da table de 'users_friends'


PODERIA 
SER 

1 SURROGATE 

KEY (AQUELA COLUMN DE 'id', com data type de 'SERIAL' e constraint de 'PRIMARY KEY'),


 
 OU ENTÃO 


 PODERÍAMOS 

 SER MAIS CHIQUES 


 E CONSTRUIR UMA 'COMPOSITE KEY',



 POR MEIO 


 DA UNIÃO

 DOS VALUES 




 DAS COLUMNS DE 'user_id'



 e 

 'friend_id'...







 TIPO ASSIM (surrogate key):







 





CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    first_name VARCHAR(300) NOT NULL,
    last_name VARCHAR(300) NOT NULL,
);
CREATE TABLE users_friends(
    id SERIAL PRIMARY KEY, --- surrogate key
    user_id INT REFERENCES users ON DELETE CASCADE, -- se esse user/friend (1 dos polos da relação) for apagado, VAMOS QUERER DELETAR ESSE RECORD DA 'FRIENDSHIP' ENTRE OS 2...
    friend_id INT REFERENCES users ON DELETE CASCADE

); 






OU ASSIM:









CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    first_name VARCHAR(300) NOT NULL,
    last_name VARCHAR(300) NOT NULL,
);
CREATE TABLE users_friends(
    user_id INT REFERENCES users ON DELETE CASCADE, -- se esse user/friend (1 dos polos da relação) for apagado, VAMOS QUERER DELETAR ESSE RECORD DA 'FRIENDSHIP' ENTRE OS 2...
    friend_id INT REFERENCES users ON DELETE CASCADE,
    PRIMARY KEY (user_id, friend_id)
); 





EX:











CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    first_name VARCHAR(300) NOT NULL,
    last_name VARCHAR(300) NOT NULL,
);
CREATE TABLE users_friends(
    ---nossa INTERMEDIATE TABLE... AMBOS OS FIELDS QUE FAZEM 'REFERENCES' VÃO __ FAZER REFERÊNCIA À MESMA TABLE, A TABLE DE 'users'...

    id SERIAL PRIMARY KEY,
    user_id INT REFERENCES users ON DELETE CASCADE, -- se esse user/friend (1 dos polos da relação) for apagado, VAMOS QUERER DELETAR ESSE RECORD DA 'FRIENDSHIP' ENTRE OS 2...
    friend_id INT REFERENCES users ON DELETE CASCADE
    -- PRIMARY KEY (user_id, friend_id) -- nossa primary key poderia ser essa 'composite key', se quiséssemos (serial a 'REAL KEY' dessa table, ao contrário da 'surrogate key' de 'id', que é ARTIFICIAL)...
); 





















OK...








mas temos 

1 ''PITFALL'


EM POTENCIAL,


AQUI...








É CLARO QUE QUANDO









1 USER DE ID '''1''''




É __ AMIGO __ 


DO USER COM ID DE '''''2''''',



HÁ 




2 

FORMAS DE INSERIR ESSA RELATION...






--> 2 formas?








1a FORMA)        PODERÍAMOS 



INSERIR 


O 

id de '1' 



COMO O VALUE PARA O 'user_id',



e aí 



o 

id do outro usuário,



'2',


como 


VALUE 

DO 




'friend_id'...














--> SIM.... MAS COMO AMBOS APONTAM À MESMA TABLE,



'THE OTHER WAY AROUND'
TAMBÉM É POSSÍVEL (


    colocar 

    '2' como o USER_ID,


    e aí 

    '1' COMO O FRIEND_id...
)













---> E EMBORA NENHUMA DAS 2 APPROACHES
 

  


SEJA EXATAMENTE ERRADA,



NÓS __ DEFINITIVAMENTE QUEREMOS 
TER 1 POUCO DE CONSISTÊNCIA,



QEUREMOS 

ASSEGURAR  QUE 




'NÓS __ NÃO ACIDENTALMENTE __ ADICIONEMOS 

A MESMA RELATION 2x NESSA TABLE INTERMEDIÁRIA,



A MESMA RELATION MAS COM __ OS IDS DOS USERS EM DIFERENTES COLUMNS' (duplicação de dados)...
















--> É POR ISSO QUE 



SE TIVERMOS 





1 'AMIZADE'

QUE É TIPO ASSIM:



''''''''
user_id: 1 
friend_id: 2,
''''''''








NÓS NÃO VAMOS QUERER 


TER UMA OUTRA AMIZADE ASSIM:




''''''''
user_id: 2
friend_id: 1,
''''''''











--> NÃO VAMOS QUERER 


TER 2 ROWS PARA ESSA MESMA FRIENDSHIP/CONEXÃO 

ENTRE 


ESSES 'USER',



PQ _ AÍ TEREMOS 


'''2 ROWS  EXPRESSANDO A MESMA RELATION/CONNECTION'''...












--> E PARA ASSEGURAR QUE 

ISSO NUNCA ACONTEÇA,

DEVEMOS __ ADICIONAR __ 1 CONSTRAINT EXTRA,



1 CONSTRAINT EXTRA à TABLE INTEIRA..











O CONSTRAINT QUE ADICIONAREMOS SERÁ O DE 'CHECK'...













CHECK() 












--> COM ISSO, COM 
O CHECK,

PODEMOS COLOCAR UMA CONDITION 


DE 



'(user_id < friend_id)' -----> 









com isso,


FORÇAREMOS 1 CONDIÇÃO 


DE 


'''O SMALLER ID SEMPRE VAI __ NO USER ID,



E O __ BIGGER ID SEMPRE VAI NO FRIEND ID'''' --> COM ISSO,


GARANTIREMOS 

QUE NUNCA VAMOS NOS DEPARAR 

COM O PROBLEMA DE 


'TER A MESMA RELATIONSHIP 

EM 2 DIFERENTES ROWS, NESSA TABLE DE USERS'...







FICA TIPO ASSIM:









CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    first_name VARCHAR(300) NOT NULL,
    last_name VARCHAR(300) NOT NULL,
);
CREATE TABLE users_friends(
    id SERIAL PRIMARY KEY,
    user_id INT REFERENCES users ON DELETE CASCADE, -- se esse user/friend (1 dos polos da relação) for apagado, VAMOS QUERER DELETAR ESSE RECORD DA 'FRIENDSHIP' ENTRE OS 2...
    friend_id INT REFERENCES users ON DELETE CASCADE, 
    CHECK (user_id < friend_id)  ----- EIS O CÓDIGO EM QUESTÃO.
); 














ok... 

RODAMOS 


ESSA DEFINIÇÃO DE TABLE...








-> AGORA, COM ISSO,
PODEMOS 

INSERIR ALGUNS USERS 


NESSA TABLE DE 'USERS'...



















--> PROFESSOR ESCREVE ASSIM:








INSERT INTO users (first_name)
VALUES ('Manuel', 'Max', 'Julie');















OK... AGORA VAMOS INSERIR VALUES NA TABLE DE 'users_friends'...








TIPO ASSIM:










INSERT INTO users_friends (user_id, friend_id) 
VALUES ()












--> OK, MAS OS VALUES AGORA DEVEM SER SETTADOS DE MODO QUE O 'user_id'


É SEMPRE MENOR DO QUE 

O
 



'friend_id',


PARA 

ASSEGURAR CONSISTÊNCIA...



FAZEMOS TIPO ASSIM:




INSERT INTO users_friends (user_id, friend_id) 
VALUES (1, 2);









com ISSO,


'Max tem o Manu como amigo'... (pq manu tem o id de 2, e Max tem o id de 1)..















COMO NOSSO CHECK CONSTRAINT FUNCIONOU, O INVERSO (Manu tem o max como amigo; dado redundante) 


NÃO É POSSÍVEL/PERMITIDO...





EX:



INSERT INTO users_friends (user_id, friend_id) 
VALUES (2, 1);











A CONSTRAINT DE 'friend_id deve ser maior do que user-id'



VAI TRIGGAR,

E VAI IMPEDIR ESSA OPERATION DE INSERT...








--> É ASSIM QUE PODEMOS MODELAR 

E ARMAZENAR 'SELF-REFERENCING MANY-TO-MANNY __ DATA _ E RELATIONS',

com o sql...